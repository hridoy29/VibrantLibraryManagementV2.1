@page "/home"
@* @rendermode InteractiveServer *@
@using Component
@using Syncfusion.Blazor.Navigations
@inject NavigationManager _navigate
@inject AuthenticationStateProvider _authenticationStateProvider
@using VibrantLibraryManagementV2.HelperServices
@inject CustomAuthenticationStateProvider _customAuthProvider

<PageTitle>Home</PageTitle>

@if (!artificialDelay)
{
    <div class="main-container">

        <header class="header">
            <Navbar OnSearchBoxClicked="ToggleSearchSection" />

            @if (showingSearchSection)
            {
                <Search />
            }
        </header>

        @*  <Carousel /> *@
        <RecommentedCarousel />

        <InterestAlert />

        <MightBeInterested />

        <div style="width: 100%; background: white; padding-top: 1rem; padding-bottom: 80px;">
            <ReadingHistory />
        </div>

        <div style="width: 100%; padding: 30px auto; text-align: center;">
            <Foot />
        </div>

    </div>
}
else
{
    <div style="display: flex; align-items: center; justify-content: center; margin-top: 90px;">
        <SfSkeleton Height="500px" Shape=SkeletonType.Text></SfSkeleton>
    </div>
}

@code {
    public bool artificialDelay { get; set; }
    public bool showingSearchSection { get; set; } = false;
    [Parameter] public EventCallback OnSearchBoxClicked { get; set; }

    protected override async Task OnInitializedAsync()
    {
        artificialDelay = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
            if (!authState.User.Identity.IsAuthenticated)
            {
                _navigate.NavigateTo("/login");
            }
            else
            {
                _navigate.NavigateTo("/home");
            }

            await Task.Delay(300);
            artificialDelay = false;
            StateHasChanged();
        }
    }

    private async Task LogOut()
    {
        await _customAuthProvider.LogoutAsync();
        _navigate.NavigateTo("/login");
    }

    private void ToggleSearchSection()
    {
        showingSearchSection = !showingSearchSection;
        StateHasChanged();
    }
}

<style>
    .main-container {
        display: flex;
        flex-direction: column;
        background: rgb(245, 249, 245);
    }

    .header {
        margin: 0px auto;
        width: 100%;
        border-bottom: 1px solid lightgray;
        background: white;
    }

</style>