@inject IJSRuntime JSRuntime
@inject IImagesServices ImageServices

<CarouselItem>
    <div class="first">
        <div class="second" style="background: radial-gradient(circle at right top, transparent 40%, rgb(255 255 255)), linear-gradient(to top, rgb(255 255 255), transparent), url(@BackgroundImage);">
            <h4 class="recomendation-text">Vibrant Recommended</h4>
            <figure class="img-container">
                <div class="left-image-cu">
                    <img src="@ImageUrlFromAPI" alt="@Title" style="height:100%;width:100%; border-radius: 20px;" />
                </div>
                <figcaption class="img-caption">
                    <div class="description">
                        <div>
                            <h4>@GetFirstPart(Title)</h4>
                            <p>@GetLastPart(Title)</p>
                            <h6>by @Author</h6>
                        </div>
                        <div class="summery">
                            <h6>Summary</h6>
                            <p>
                                @LimitCharacters(Summery, 200)
                            </p>
                        </div>
                        <div>
                            <h6>Ratings</h6>
                            <SfRating Value="@Ratings" ReadOnly></SfRating>
                            <div>
                                <img src=".././icons/share.png" class="icon" />&nbsp; Share &nbsp;
                                <img src=".././icons/heart.png" class="icon" /> &nbsp; Intersted
                            </div>
                        </div>
                    </div>
                </figcaption>
            </figure>
            <div style="padding-bottom: 40px;"></div>
        </div>
    </div>
</CarouselItem>

@code {
    [Parameter]
    public string BackgroundImage { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string Author { get; set; }
    [Parameter]
    public double Ratings { get; set; }
    [Parameter]
    public string Summery { get; set; }
    [Parameter]
    public string BookCover { get; set; }

    public string ImageUrlFromAPI { get; set; }

    string token = "";

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(BookCover))
        {
            token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            var result = await ImageServices.GetImageUrl(BookCover, token);
            ImageUrlFromAPI = result.FileUrl;
        }
        else
        {
            ImageUrlFromAPI = "File not found";
        }
    }


    private string GetFirstPart(string title)
    {
        var parts = title.Split(':');
        return parts.Length > 0 ? parts[0] : string.Empty;
    }

    private string GetLastPart(string title)
    {
        var parts = title.Split(':');
        return parts.Length > 0 ? parts[^1] : string.Empty;
    }

    private string LimitCharacters(string text, int maxLength)
    {
        if (text.Length <= maxLength)
        {
            return text;
        }
        return text.Substring(0, maxLength) + "...";
    }
}