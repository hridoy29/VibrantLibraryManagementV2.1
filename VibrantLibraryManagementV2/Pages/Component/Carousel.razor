@using Syncfusion.Blazor.Navigations
@inject IJSRuntime JSRuntime
@inject IRecommendedService RecommendedService
@inject IImagesServices ImagesServices

<head>
    <link rel="stylesheet" href="/css/Carousel.css" />
</head>

<div class="control-container">
    <SfCarousel AutoPlay="false" ShowIndicators="false">
        @if (isLoading)
        {
            <div>
                <div id="container">
                    <SfSpinner @bind-Visible="@VisibleProperty">
                    </SfSpinner>
                </div>
            </div>
        }
        else
        {
            @foreach (var doc in recommends.Response.Docs)
            {
                <VibrantLibraryManagementV2.Pages.Component.CustomCarouselItem BackgroundImage="@backgroundImage" Title="@doc.Title" Author="@doc.Author" Summery="@doc.Synopsis[0]" BookCover="@(doc.BookCover is null ? "/images/NoImageFound.png" : doc.BookCover)" />
            }
        }
    </SfCarousel>
</div>

@code{
    private SearchResponse recommends;
    private bool isLoading = true;
    private string errorMessage;
    public string ImageUrlFromAPI { get; set; }
    private bool VisibleProperty { get; set; } = true;

    public string backgroundImage { get; set; } = "images/harry-potter-free.jpg";
    public string backgroundImage1 { get; set; } = "images/harry-potter-book-cover.jpg";

    private bool isInitialized = false;
    private string token = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;
            try
            {
                token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
                if (string.IsNullOrWhiteSpace(token))
                {
                    throw new UnauthorizedAccessException("JWT token not found.");
                }

                var response = await RecommendedService.FetchEditorsPicksAsync(token);
                recommends = response;
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }
}