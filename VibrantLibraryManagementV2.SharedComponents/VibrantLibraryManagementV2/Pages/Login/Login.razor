@page "/login"
@inject ILoginService LoginService;
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthenticationService AuthenticationService
@inject ILogger<Login> Logger
@inject IHttpContextAccessor HttpContextAccessor
@inject IServiceProvider _serviceProvider
@* @inject ISessionStorageService SessionStorage *@
@inject CustomAuthenticationStateProvider customAuthenticationStateProvider
@inject IStringLocalizer<App> localizer
@inject ISessionService _sessionService
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>

<head>

</head>
@{
    if (!IsLoading)
    {
        <div class="w-100 custom-div-width">
            <div class="row p-0">
                <div class="col-12 col-md-4 left-column">
                    <div class="container custom-container">
                        <div class="col-12 logo-image">
                            <img src="/images/vibrantlogobgremove.png" class="img-fluid" />

                        </div>
                        <div class="col-12 login-text">
                            <h4 style="margin:17px 0px 0px 0px; font-family: roboto;">@localizer["Log in"]</h4>
                        </div>
                        <div class="text-center">
                            @{
                                if (!IsValid)
                                {
                                    <span class="error-text">@ResponseMessage</span>
                                }
                            }
                        </div>

                        <SfDataForm ID="LoginForm" Model="loginEntity" OnValidSubmit="Submit">
                            <FormValidator>
                                <DataAnnotationsValidator></DataAnnotationsValidator>
                            </FormValidator>
                            <FormItems>
                                <FormItem Field="@nameof(loginEntity.Email)">
                                    <Template>
                                        <div class="email">
                                            <SfTextBox CssClass="custom-textbox" @ref="@TextBoxEmailObj" @bind-Value="loginEntity.Email" Type="InputType.Email" Placeholder="@localizer["Email address"]" Created="@AddIcons" OnChange="OnEmailChanged"></SfTextBox>
                                            
                                            </div>
                                        </Template>
                                    </FormItem>
                                    <FormItem Field="@nameof(loginEntity.Password)">
                                        <Template>
                                            <div class="password">
                                                <SfTextBox CssClass="custom-textbox" @ref="@TextBoxPasswordObj" @bind-Value="loginEntity.Password" Type="TextBoxType" Placeholder="@localizer["Password"]" Created="@AddIconsForPasswrd" OnChange="OnPasswordChanged"></SfTextBox>
                                                
                                            </div>
                                        </Template>
                                    </FormItem>
                                    <FormButtons>
                                        <div style="display: flex; flex-direction: column; width: 100%; gap: 20px;">
                                            <div class="remember-me">
                                                <SfCheckBox Label="@localizer["Remember me"]" @bind-Checked="isChecked" @onchange="onRememberMechange"></SfCheckBox>
                                            </div>
                                            <SfButton CssClass="e-primary custom-button login-button"
                                                      style="@LoginButtonStyle"
                                                      class="w-100"
                                                      Disabled=@isButtonDisabled>@localizer["Log in"]</SfButton>
                                        </div>
                                    </FormButtons>
                                </FormItems>
                            </SfDataForm>
                            <div>
                                @{
                                if (failedloginattempt && LoginAttemptLeft is not null && LoginAttemptLeft.failed == LoginAttemptLeft.retries)
                                {
                                    <span class="error-text">Your account is locked, contact with you IT</span>
                                }
                            }
                        </div>

                        <div class="col-12 mt-2">
                            <p class="custom-p" style="font-size: 13px;">@localizer["Forget Password"]?</p>
                        </div>
                        <div class="col-12 mt-2">
                            <div class="d-flex g-3" style="font-size: 13px;"> <span class="text-muted">@localizer["Don't have an account"]?</span> <p class="custom-p ms-1">@localizer["Create account"]</p></div>
                        </div>

                        <div class="privacy-policy">
                            <p style="margin-bottom: 0px; font-size: 16px;">
                                <span style="text-decoration: underline;">@localizer["PrivacyPolicy"]</span> @localizer["and"]
                                <span style="text-decoration: underline;">@localizer["terms of service"]</span>
                            </p>
                            <div style="width: 100px;">
                                <ChooseLanguage />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-8 m-0 p-0 right-column">
                    <img src="/images/bookstreehq.jpg" class="tree-img" />
                </div>
            </div>

        </div>

        @* Toast Notification *@
        <div class="col-lg-12 control-section toast-default-section">
            <SfToast ID="toast_default" @ref="ToastObj"
                     Title="Login Failed"
                     Content="Incorrect email or password"
                     Timeout="3000">
                <ToastPosition X="Right"></ToastPosition>
            </SfToast>
        </div>
    }
    else
    {
        <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); display: none;">
            <span>Loading...</span>
        </div>
    }
}


@code {
    SfTextBox TextBoxEmailObj;
    SfTextBox TextBoxPasswordObj;
    SfToast ToastObj;
    private LoginEntity loginEntity = new LoginEntity();
    bool IsPasswordVisible = false;
    InputType TextBoxType => IsPasswordVisible ? InputType.Text : InputType.Password;
    public Logins LoginAttemptLeft = new Logins();
    public bool failedloginattempt = false;
    private bool isChecked = false;
    private bool isButtonDisabled = true;
    public string LoginButtonStyle => $"border-radius: 10px;margin-bottom: 10px;{(isButtonDisabled ? "background-color: gray !important;" : "background-color: #30cc7d !important;")}";
    private bool IsValid = true;
    public bool IsLoading { get; set; }
    public string ResponseMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/home");
        }
        loginEntity = new LoginEntity();
        StateHasChanged();
    }


    private void OnEmailChanged()
    {
        string email = TextBoxEmailObj.Value;

        string emailPattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
        bool isEmailValid = Regex.IsMatch(email, emailPattern);

        if (!string.IsNullOrWhiteSpace(TextBoxPasswordObj.Value) && !string.IsNullOrWhiteSpace(TextBoxEmailObj.Value) && isEmailValid)
        {
            isButtonDisabled = false;
            StateHasChanged();
            return;
        }
        isButtonDisabled = true;
        StateHasChanged();
    }

    private void OnPasswordChanged()
    {
        string email = TextBoxEmailObj.Value;
        string emailPattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
        bool isEmailValid = Regex.IsMatch(email, emailPattern);

        if (!string.IsNullOrWhiteSpace(TextBoxPasswordObj.Value) && !string.IsNullOrWhiteSpace(TextBoxEmailObj.Value) && isEmailValid)
        {
            isButtonDisabled = false;
            StateHasChanged();
            return;
        }
        isButtonDisabled = true;
        StateHasChanged();
    }

    /// <summary>
    /// Perform login. On successfull login redirect to Home page
    /// </summary>
    /// <returns></returns>
    private async Task Submit()
    {
        try
        {
            var result = await LoginService.Login(loginEntity);

            if (result is not null && result.Status == 200)
            {
                await StoreToken(result);
                await _sessionService.Remove("UserDetails");
                if (isChecked)
                {
                    await _sessionService.Set<LoginEntity>("UserDetails", loginEntity);
                }
                Navigation.NavigateTo("/home", true);
            }
            else if (result is not null && result.Status == 423)
            {
                IsValid = false;
                ResponseMessage = result.Message;
                isButtonDisabled = true;
            }
            else if (result is not null)
            {
                LoginAttemptLeft = result.Logins;
                IsValid = false;
                ResponseMessage = "Invalid email or password";
                failedloginattempt = true;
                isButtonDisabled = true;
                StateHasChanged();
            }
            else
            {
                IsValid = false;
                ResponseMessage = "Invalid email or password";
                isButtonDisabled = true;
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            ResponseMessage = $"An error occurred: {ex.Message}";
        }
    }

    public async Task StoreToken(LoginResponse authResponse)
    {
        await customAuthenticationStateProvider.SetAuthenticationStateAsync(authResponse.AccessToken);
    }

    public async Task AddIcons()
    {
        await this.TextBoxEmailObj.AddIconAsync("prepend", "e-icons");

    }

    public async Task AddIconsForPasswrd()
    {
        await this.TextBoxPasswordObj.AddIconAsync("prepend", "e-icons");
    }


    private async Task onRememberMechange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        await _sessionService.Set("VibrantRememberMe", isChecked);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
            {
                Navigation.NavigateTo("/home");
            }
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (!string.IsNullOrWhiteSpace(token))
            {
                Navigation.NavigateTo("/home");
            }
            await Task.Delay(300);
            IsLoading = false;
            StateHasChanged();
        }
    }
}

