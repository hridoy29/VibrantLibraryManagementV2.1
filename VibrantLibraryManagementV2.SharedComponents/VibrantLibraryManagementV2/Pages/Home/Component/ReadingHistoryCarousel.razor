@inject IImagesServices ImageServices
@inject IJSRuntime JSRuntime

<div class="bookcard-left-right">
    @* BookImage/Cover Section *@
    @if (string.IsNullOrEmpty(ImageUrlFromAPI))
    {
        <div class="custom-book-image-container" style="max-width: 128px; height: 190px;">
            <p style="font-size: 12px;">@((BookName.Length > 80) ? BookName.Substring(0, 80) + ".." : BookName)</p>
        </div>
    }
    else
    {
        <img class="book-image-left-right" src="@ImageUrlFromAPI" alt="@AlternativeText">
    }
    @* Details Section *@
    <div class="detail-container-ms pt-2">
        @* BookName *@
        <h6 class="interest-alert-book-name" style="font-size: 12px;">
            <SfTooltip ID="Tooltip" Target="#btn" Content="@BookName">
                <p ID="btn" Content="Show Tooltip" class="reading-history-book-name-first" title="@BookName">
                    @((BookName.Length > 50) ? BookName.Substring(0, 44) + ".." : BookName)
                </p>
            </SfTooltip>
        </h6>
        @* Author *@
        <p class="autor-interest-alert-left-right text-muted">
            @if (string.IsNullOrEmpty(Author))
            {
                <span>Author is not found</span>
            }
            else
            {
                @Author
            }
        </p>
        @* Ratings *@
        <p class="autor-interest-alert-left-right-link ">You rate this book</p>
        <div class="ratings-container">
            <SfRating Value="@Ratings" ReadOnly></SfRating>
            <span>@Ratings/5</span>
        </div>
        @* Share *@
        <div class="mt-3">
            <img src=".././icons/share.png" class="icon" style="width: 10px; height: 10px;" /> 
            <span class="share-reading-history-card">Share</span>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string BookName { get; set; } = string.Empty;
    [Parameter]
    public string ImageUrl { get; set; } = string.Empty;
    [Parameter]
    public string AlternativeText { get; set; } = string.Empty;
    [Parameter]
    public string Author { get; set; } = string.Empty;
    [Parameter]
    public double Ratings { get; set; }

    public string token = string.Empty;

    public string ImageUrlFromAPI = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        var result = await ImageServices.GetImageUrl(ImageUrl, token);
        ImageUrlFromAPI = result.FileUrl;
    }
}