@inject IJSRuntime JSRuntime
@inject IMightBeInterested mightBeInterested

<div style="display: @(LoadingDelay ? "none" : "")" class="interested-section @(errorMessage is not null ? "errorInGettingData" : "")">
    <div class="interested-alert-title">
        <h3 class="main-title">You might also be interested</h3>
        <p style="cursor: pointer;">View all</p>
    </div>

    <div class="carousel-container-interested">
        <div style="position: relative;">
            <div class="slider-display" id="slider-display">
                @if (isLoading)
                {
                    <div class="items-details" id="interested">
                        <SfSpinner></SfSpinner>
                    </div>
                }
                else
                {
                    @if (mightBeInterestData.Response is not null)
                    {
                        @foreach (var item in mightBeInterestData.Response.Docs)
                        {
                            <div class="items-details" id="interested">
                                <div class="interest-book-cover">
                                    @if (item.BookCover is null)
                                    {
                                        <div class="custom-book-image-container-might-interest" style="width: 100%; height: 100%;">
                                            @((item.Title.Length > 80) ? item.Title.Substring(0, 70) + ".." : item.Title)
                                        </div>
                                    }
                                    else
                                    {
                                        <img src="@(item.BookCover != null ? item.BookCover : "/images/NoImageFound.png")" al="Book cover" />
                                    }
                                </div>
                                <div style="margin-right: 20px;" class="book-info-container">
                                    <div>
                                        <SfTooltip ID="Tooltip" Target="#btn" Content="@item.Title">
                                            <h5 ID="btn" Content="Show Tooltip" class="book-title-unique">
                                                @((item.Title.Length > 70) ? item.Title.Substring(0, 60) : item.Title)
                                            </h5>
                                        </SfTooltip>
                                        <p style="margin: 2px;">@item.Author</p>
                                        <p class="details-title">Publisher : </p>
                                        <p class="summery-text-unique" style="max-width: 250px;">@item.Publisher</p>
                                    </div>

                                    <div>
                                        <div>
                                            <p class="rating-title">Ratings</p>
                                            <SfRating Value="@item.AvgRatings" Disabled></SfRating> <span>@item.AvgRatings</span>
                                        </div>
                                        <div style="display: flex; font-size: 12px; padding: 10px 0px;">
                                            <div>
                                                <img src=".././icons/share.png" class="icon-might-interest" />
                                                <span>&nbsp; Share &nbsp;</span>
                                            </div>
                                            <div>
                                                <img src=".././icons/heart.png" class="icon-might-interest" />
                                                <span>&nbsp; Interested</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                }
            </div>
            <button class="prev2" id="mightintrest-prev-button" @onclick="MovePrev" style="display: none;">
                <img src="/icons/left-chevron.png" alt="left icon" />
            </button>
            <button class="next2" id="mightintrest-next-button" @onclick="MoveNext">
                <img src="/icons/right-chevron.png" alt="right icon" />
            </button>
        </div>

        <div class="carousel-items-interested" id="carousel-items-interested">
            @if (isLoading)
            {
                <SfSpinner></SfSpinner>
            }
            else
            {
                if (mightBeInterestData.Response is not null)
                {
                    @foreach (var item in mightBeInterestData.Response.Docs.Skip(1))
                    {
                        <BookCard BookName="@item.Title" ImageUrl="@item.BookCover" Author="@item.Author" Ratings="@item.AvgRatings" />
                    }

                    @for (int i = 0; i < 8; i++)
                    {
                        <EmptyCard />
                    }
                }
            }
        </div>
    </div>
    <div class="spacer"></div>
</div>

@code {
    private SearchResponse mightBeInterestData = new SearchResponse();
    private bool isLoading = true;
    private string errorMessage { get; set; }
    private bool isInitialized = false;
    private string token { get; set; }
    private bool VisibleProperty { get; set; } = true;
    [Parameter]
    public bool LoadingDelay { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;
            try
            {
                token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
                if (string.IsNullOrWhiteSpace(token))
                {
                    throw new UnauthorizedAccessException("JWT token not found.");
                }
                var response = await mightBeInterested.GetMightBeInterested(token);
                mightBeInterestData = response;
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }

            if (token is not null)
            {
                await JSRuntime.InvokeVoidAsync("MightBeInterestedSwapping");
            }
        }
    }

    private async Task MoveNext()
    {
        await InvokeAsync(() => JSRuntime.InvokeVoidAsync("moveSlide2", 1));
    }

    private async Task MovePrev()
    {
        await InvokeAsync(() => JSRuntime.InvokeVoidAsync("moveSlide2", -1));
    }
}
